name: Create Release PR

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  pull-requests: write

jobs:
  create-pr:
    name: Create Release PR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install cargo-edit
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-edit

      - name: Get current versions
        id: current_versions
        run: |
          CARGO_VERSION=$(cargo pkgid -p takumi | cut -d "#" -f2)
          echo "cargo_version=$CARGO_VERSION" >> $GITHUB_OUTPUT
          echo "Current Cargo version: $CARGO_VERSION"

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION=${{ steps.current_versions.outputs.cargo_version }}
          NEW_VERSION=$(bunx semver -i ${{ github.event.inputs.version_type }} $CURRENT_VERSION)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version will be: $NEW_VERSION"

      - name: Update Cargo.toml version
        run: |
          cargo set-version -p takumi "${{ steps.new_version.outputs.new_version }}"
          cargo set-version -p takumi-napi-core "${{ steps.new_version.outputs.new_version }}"
          cargo set-version -p takumi-wasm "${{ steps.new_version.outputs.new_version }}"

      - name: Update package.json version
        run: |
          jq -r '.version = "${{ steps.new_version.outputs.new_version }}"' takumi-helpers/package.json > temp.json && mv temp.json takumi-helpers/package.json
          jq -r '.version = "${{ steps.new_version.outputs.new_version }}"' takumi-wasm/package.json > temp.json && mv temp.json takumi-wasm/package.json
          jq -r '.version = "${{ steps.new_version.outputs.new_version }}"' takumi-napi-core/package.json > temp.json && mv temp.json takumi-napi-core/package.json
          jq -r '.version = "${{ steps.new_version.outputs.new_version }}"' takumi-image-response/package.json > temp.json && mv temp.json takumi-image-response/package.json
          jq -r '.version = "${{ steps.new_version.outputs.new_version }}"' takumi-template/package.json > temp.json && mv temp.json takumi-template/package.json

      - name: Refresh bun.lock
        run: rm bun.lock && bun i

      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            COMMITS=$(git log --oneline --pretty=format:"- [%h](https://github.com/${{ github.repository }}/commit/%H) %s" | head -20)
          else
            COMMITS=$(git log --oneline --pretty=format:"- [%h](https://github.com/${{ github.repository }}/commit/%H) %s" ${PREVIOUS_TAG}..HEAD)
          fi

          # Set multiline output directly
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "## What's Changed" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...v${{ steps.new_version.outputs.new_version }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Remove git hooks (--no-verify)
        run: rm -rf .git/hooks

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: bump version to v${{ steps.new_version.outputs.new_version }}"
          title: "Release v${{ steps.new_version.outputs.new_version }}"
          body: |
            This PR bumps the version to v${{ steps.new_version.outputs.new_version }}.

            ## Changes
            - ðŸ“¦ Bump `takumi` version from v${{ steps.current_versions.outputs.cargo_version }} to v${{ steps.new_version.outputs.new_version }}
            - ðŸ“¦ Bump `@takumi-rs/core` version from v${{ steps.current_versions.outputs.cargo_version }} to v${{ steps.new_version.outputs.new_version }}
            - ðŸ“¦ Bump `@takumi-rs/wasm` version from v${{ steps.current_versions.outputs.cargo_version }} to v${{ steps.new_version.outputs.new_version }}
            - ðŸ“¦ Bump `@takumi-rs/helpers` version from v${{ steps.current_versions.outputs.cargo_version }} to v${{ steps.new_version.outputs.new_version }}

            ${{ steps.changelog.outputs.changelog }}

            ## Checklist
            - [ ] Version numbers updated correctly
            - [ ] Changelog looks accurate
            - [ ] All tests pass
            - [ ] Tag v${{ steps.new_version.outputs.new_version }} has been created and pushed

            After merging, the release will be created automatically.
          branch: release/v${{ steps.new_version.outputs.new_version }}
          delete-branch: true

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Ensure we're on the latest commit of the release branch
          git fetch origin release/v${{ steps.new_version.outputs.new_version }}
          git checkout release/v${{ steps.new_version.outputs.new_version }}
          
          # Fetch latest tags from remote
          git fetch --tags --force
          
          # Check if tag already exists and handle accordingly
          TAG_NAME="v${{ steps.new_version.outputs.new_version }}"
          
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists, checking if it points to current commit..."
            CURRENT_COMMIT=$(git rev-parse HEAD)
            TAG_COMMIT=$(git rev-parse "$TAG_NAME^{}")
            
            if [ "$CURRENT_COMMIT" != "$TAG_COMMIT" ]; then
              echo "Tag points to different commit, force updating..."
              git tag -f "$TAG_NAME" -m "Release $TAG_NAME"
              git push origin "$TAG_NAME" --force
            else
              echo "Tag already points to current commit, no action needed"
            fi
          else
            echo "Creating new tag $TAG_NAME..."
            git tag "$TAG_NAME" -m "Release $TAG_NAME"
            git push origin "$TAG_NAME"
          fi
