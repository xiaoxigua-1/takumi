name: CI

on:
  push:

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: "0"
  MACOSX_DEPLOYMENT_TARGET: '10.13'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  id-token: write

# Jobs are grouped by package
jobs:
  biome-lint:
    name: Biome Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run Biome Check
        run: bun lint

  test-rust:
    name: Rust Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          binstall: cargo-audit,cargo-llvm-cov,cargo-rdme
          components: rustfmt,clippy
          stage: test

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --all-features --workspace

      - name: Run doc tests
        run: cargo test --doc --all-features --workspace

      - name: Test README.md is up to date
        working-directory: takumi
        run: cargo rdme --check

      - name: Run security audit
        run: cargo audit

      - name: Generate coverage report
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: lcov.info
          fail_ci_if_error: false
          use_oidc: true

  build-helpers:
    name: Build @takumi-rs/helpers
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile --filter ./takumi-helpers
      
      - name: Test
        working-directory: takumi-helpers
        run: bun test

      - name: Build helpers
        working-directory: takumi-helpers
        run: bun run build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: helpers-dist
          path: takumi-helpers/dist
          if-no-files-found: error

  version-check-helpers:
    name: Check version for @takumi-rs/helpers
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.check.outputs.exists }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - uses: ./.github/actions/npm-version-exists-check
        id: check
        with:
          working_directory: takumi-helpers

  publish-helpers:
    name: Publish @takumi-rs/helpers
    needs: [build-helpers, version-check-helpers]
    if: github.ref == 'refs/heads/master' && needs.version-check-helpers.outputs.exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Download artifact
        uses: actions/download-artifact@v5
        with:
          name: helpers-dist
          path: takumi-helpers/dist

      - name: Publish
        uses: ./.github/actions/publish-npm
        with:
          working_directory: takumi-helpers
          npm_token: ${{ secrets.NPM_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

  build-napi:
    needs: test-rust
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: windows-2025
            target: x86_64-pc-windows-msvc
            build: bun run build --target x86_64-pc-windows-msvc
            # `windows-11-arm` is available, but bun does not have ARM64 support yet https://github.com/oven-sh/bun/issues/9824
          - host: windows-2025
            target: aarch64-pc-windows-msvc
            build: bun run build --target aarch64-pc-windows-msvc
          - host: macos-15
            target: aarch64-apple-darwin
            build: bun run build --target aarch64-apple-darwin
          - host: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            build: bun run build --target aarch64-unknown-linux-gnu --use-napi-cross
          - host: ubuntu-24.04-arm
            target: aarch64-unknown-linux-musl
            build: bun run build --target aarch64-unknown-linux-musl -x
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            # --use-napi-cross is required to pin libc version at 2.31 (from cross-rs docs)
            build: bun run build --target x86_64-unknown-linux-gnu --use-napi-cross
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            build: bun run build --target x86_64-unknown-linux-musl -x

    name: Build @takumi-rs/core for ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}

    steps:
      - uses: actions/checkout@v5

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          targets: ${{ matrix.settings.target }}
          stage: build

      - name: Install cargo-zigbuild
        if: ${{ contains(matrix.settings.target, 'musl') }}
        run: pip install cargo-zigbuild

      - name: Install dependencies
        run: bun install --frozen-lockfile --filter ./takumi-napi-core

      - name: Build
        working-directory: takumi-napi-core
        run: ${{ matrix.settings.build }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: |
            takumi-napi-core/core.*.node
            takumi-napi-core/index.js
            takumi-napi-core/index.d.ts
          if-no-files-found: error

  test-napi:
    needs: build-napi
    name: Test @takumi-rs/core for ${{ matrix.settings.target }}
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: windows-2025
            target: x86_64-pc-windows-msvc
          # Windows ARM64 can be built atm, but since bun does not have ARM64 support yet https://github.com/oven-sh/bun/issues/9824,
          # we don't test it.
          # - host: windows-11-arm
          #   target: aarch64-pc-windows-msvc
          - host: macos-15
            target: aarch64-apple-darwin
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - host: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
          - host: ubuntu-24.04-arm
            target: aarch64-unknown-linux-musl
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v5

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Download helpers artifact
        uses: actions/download-artifact@v5
        with:
          name: helpers-dist
          path: takumi-helpers/dist

      - name: Install dependencies
        run: bun install --frozen-lockfile --filter ./takumi-napi-core

      - name: Download N-API bindings artifact
        uses: actions/download-artifact@v5
        with:
          name: bindings-${{ matrix.settings.target }}
          path: takumi-napi-core

      - name: List packages
        run: ls -R .
        working-directory: takumi-napi-core

      - name: Test bindings
        if: ${{ !contains(matrix.settings.target, 'musl') }}
        working-directory: takumi-napi-core
        run: bun test

      - name: Test bindings in Alpine (musl)
        if: contains(matrix.settings.target, 'musl')
        run: |
          docker run --rm -v $PWD:/workspace -w /workspace/takumi-napi-core \
            oven/bun:alpine bun test

  version-check-napi:
    name: Check version for @takumi-rs/core
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.check.outputs.exists }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - uses: ./.github/actions/npm-version-exists-check
        id: check
        with:
          working_directory: takumi-napi-core

  publish-napi:
    name: Publish @takumi-rs/core
    needs: [build-napi, test-napi, version-check-napi]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && needs.version-check-napi.outputs.exists == 'false'
    steps:
      - uses: actions/checkout@v5

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: takumi-napi-core/artifacts

      - name: Install dependencies
        run: bun install --frozen-lockfile --filter ./takumi-napi-core

      - uses: actions/setup-node@v4

      - name: Publish
        working-directory: takumi-napi-core
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          bun artifacts
          cp artifacts/bindings-x86_64-unknown-linux-gnu/index.* .
          npm publish --access public --provenance
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-wasm:
    name: Build @takumi-rs/wasm
    runs-on: ubuntu-latest
    needs: test-rust
    steps:
      - uses: actions/checkout@v5

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          targets: wasm32-unknown-unknown
          stage: build

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build WASM
        working-directory: takumi-wasm
        run: bun run build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: wasm-package
          path: |
            takumi-wasm/pkg/*
          if-no-files-found: error
    
  test-wasm:
    name: Test @takumi-rs/wasm
    needs: [build-wasm]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Download helpers artifact
        uses: actions/download-artifact@v5
        with:
          name: helpers-dist
          path: takumi-helpers/dist

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: wasm-package
          path: takumi-wasm/pkg

      - name: Install dependencies
        run: bun install --frozen-lockfile --filter ./takumi-wasm

      - name: Test WASM
        working-directory: takumi-wasm
        run: bun test

  version-check-wasm:
    name: Check version for @takumi-rs/wasm
    needs: build-wasm
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.check.outputs.exists }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - uses: ./.github/actions/npm-version-exists-check
        id: check
        with:
          working_directory: takumi-wasm

  publish-wasm:
    name: Publish @takumi-rs/wasm
    needs: [test-wasm, version-check-wasm]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && needs.version-check-wasm.outputs.exists == 'false'
    steps:
      - uses: actions/checkout@v5

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: wasm-package
          path: takumi-wasm/pkg

      - name: Publish
        uses: ./.github/actions/publish-npm
        with:
          working_directory: takumi-wasm
          npm_token: ${{ secrets.NPM_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

  publish-crate:
    name: Publish takumi to crate.io
    runs-on: ubuntu-latest
    needs: [test-rust, version-check-helpers]
    if: github.ref == 'refs/heads/master' && needs.version-check-helpers.outputs.exists == 'false'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          stage: publish

      - name: Publish to crates.io
        run: cargo publish -p takumi
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish-helpers, publish-napi, publish-wasm, publish-crate]
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          version=$(jq -r '.version' takumi-helpers/package.json)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Skip tag creation (moved to release-pr.yml)
        run: |
          echo "Tag creation has been moved to release-pr.yml workflow"

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="v${{ steps.get_version.outputs.version }}"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            COMMITS=$(git log --oneline --pretty=format:"- [%h](https://github.com/${{ github.repository }}/commit/%H) %s" | head -20)
          else
            COMMITS=$(git log --oneline --pretty=format:"- [%h](https://github.com/${{ github.repository }}/commit/%H) %s" ${PREVIOUS_TAG}..HEAD~1)
          fi

          # Set multiline output
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "## What's Changed" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${VERSION}" >> $GITHUB_OUTPUT
          fi
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: false

  pass-test:
    name: Pass Test
    runs-on: ubuntu-latest
    needs: [biome-lint, test-rust, test-napi, test-wasm]
    if: always()
    steps: 
      - run: echo "Pass test"