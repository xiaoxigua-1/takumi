// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { AlignItems } from "./AlignItems";
import type { BackgroundImages } from "./BackgroundImages";
import type { BoxShadows } from "./BoxShadows";
import type { BoxSizing } from "./BoxSizing";
import type { Color } from "./Color";
import type { Display } from "./Display";
import type { FlexDirection } from "./FlexDirection";
import type { FlexWrap } from "./FlexWrap";
import type { FontFamily } from "./FontFamily";
import type { FontWeight } from "./FontWeight";
import type { Gap } from "./Gap";
import type { GridAutoFlow } from "./GridAutoFlow";
import type { GridLine } from "./GridLine";
import type { GridTemplateAreas } from "./GridTemplateAreas";
import type { GridTemplateComponents } from "./GridTemplateComponents";
import type { GridTrackSizes } from "./GridTrackSizes";
import type { ImageScalingAlgorithm } from "./ImageScalingAlgorithm";
import type { JustifyContent } from "./JustifyContent";
import type { LengthUnit } from "./LengthUnit";
import type { LineHeight } from "./LineHeight";
import type { LinearGradientOrColor } from "./LinearGradientOrColor";
import type { ObjectFit } from "./ObjectFit";
import type { Position } from "./Position";
import type { Sides } from "./Sides";
import type { TextAlign } from "./TextAlign";
import type { TextOverflow } from "./TextOverflow";
import type { TextStyle } from "./TextStyle";
import type { TextTransform } from "./TextTransform";

/**
 * Main styling structure that contains all layout and visual properties.
 */
export type Style = { 
/**
 * Display algorithm to use for the element.
 */
display: Display, 
/**
 * Width of the element.
 */
width: LengthUnit, 
/**
 * Height of the element.
 */
height: LengthUnit, 
/**
 * Max width of the element.
 */
maxWidth: LengthUnit, 
/**
 * Max height of the element.
 */
maxHeight: LengthUnit, 
/**
 * Min width of the element.
 */
minWidth: LengthUnit, 
/**
 * Min height of the element.
 */
minHeight: LengthUnit, 
/**
 * Aspect ratio of the element (width/height).
 */
aspectRatio?: number, 
/**
 * Internal spacing around the element's content (top, right, bottom, left).
 */
padding: Sides<LengthUnit>, 
/**
 * Longhand: top padding. Overrides `padding` top value.
 */
paddingTop?: LengthUnit, 
/**
 * Longhand: right padding. Overrides `padding` right value.
 */
paddingRight?: LengthUnit, 
/**
 * Longhand: bottom padding. Overrides `padding` bottom value.
 */
paddingBottom?: LengthUnit, 
/**
 * Longhand: left padding. Overrides `padding` left value.
 */
paddingLeft?: LengthUnit, 
/**
 * External spacing around the element (top, right, bottom, left).
 */
margin: Sides<LengthUnit>, 
/**
 * Longhand: top margin. Overrides `margin` top value.
 */
marginTop?: LengthUnit, 
/**
 * Longhand: right margin. Overrides `margin` right value.
 */
marginRight?: LengthUnit, 
/**
 * Longhand: bottom margin. Overrides `margin` bottom value.
 */
marginBottom?: LengthUnit, 
/**
 * Longhand: left margin. Overrides `margin` left value.
 */
marginLeft?: LengthUnit, 
/**
 * Positioning offsets (top, right, bottom, left) from the element's normal position.
 */
inset: Sides<LengthUnit>, 
/**
 * Longhand: top offset. Overrides `inset` top value.
 */
top?: LengthUnit, 
/**
 * Longhand: right offset. Overrides `inset` right value.
 */
right?: LengthUnit, 
/**
 * Longhand: bottom offset. Overrides `inset` bottom value.
 */
bottom?: LengthUnit, 
/**
 * Longhand: left offset. Overrides `inset` left value.
 */
left?: LengthUnit, 
/**
 * Direction of flex layout (row or column).
 */
flexDirection: FlexDirection, 
/**
 * How a single grid item is aligned along the inline (row) axis, overriding the container's justify-items value.
 */
justifySelf?: AlignItems, 
/**
 * How items are aligned along the main axis.
 */
justifyContent?: JustifyContent, 
/**
 * How lines are aligned within the flex container when there's extra space in the cross axis.
 */
alignContent?: JustifyContent, 
/**
 * How grid items are aligned along the inline (row) axis within their grid areas.
 */
justifyItems?: AlignItems, 
/**
 * How items are aligned along the cross axis.
 */
alignItems?: AlignItems, 
/**
 * How a single item is aligned along the cross axis, overriding the container's align-items value.
 */
alignSelf?: AlignItems, 
/**
 * How flex items should wrap.
 */
flexWrap: FlexWrap, 
/**
 * The initial main size of the flex item before growing or shrinking.
 */
flexBasis: LengthUnit, 
/**
 * Positioning method (relative, absolute, etc.).
 */
position: Position, 
/**
 * Spacing between rows and columns in flex or grid layouts.
 */
gap: Gap, 
/**
 * How much the flex item should grow relative to other flex items when positive free space is distributed.
 */
flexGrow: number, 
/**
 * How much the flex item should shrink relative to other flex items when negative free space is distributed.
 */
flexShrink: number, 
/**
 * Width of the element's border on each side (top, right, bottom, left).
 */
borderWidth: Sides<LengthUnit>, 
/**
 * Longhand: top border width. Overrides `border_width` top value.
 */
borderTopWidth?: LengthUnit, 
/**
 * Longhand: right border width. Overrides `border_width` right value.
 */
borderRightWidth?: LengthUnit, 
/**
 * Longhand: bottom border width. Overrides `border_width` bottom value.
 */
borderBottomWidth?: LengthUnit, 
/**
 * Longhand: left border width. Overrides `border_width` left value.
 */
borderLeftWidth?: LengthUnit, 
/**
 * How images should be fitted within their container.
 */
objectFit: ObjectFit, 
/**
 * Background image(s): linear or radial gradients.
 */
backgroundImage?: BackgroundImages, 
/**
 * Background color for the element.
 */
backgroundColor?: Color, 
/**
 * Box shadow effect for the element.
 */
boxShadow?: BoxShadows, 
/**
 * Controls the size of implicitly-created grid columns.
 */
gridAutoColumns?: GridTrackSizes, 
/**
 * Controls the size of implicitly-created grid rows.
 */
gridAutoRows?: GridTrackSizes, 
/**
 * Controls how auto-placed items are inserted in the grid.
 */
gridAutoFlow?: GridAutoFlow, 
/**
 * Specifies a grid item's size and location within the grid column.
 */
gridColumn?: GridLine, 
/**
 * Specifies a grid item's size and location within the grid row.
 */
gridRow?: GridLine, 
/**
 * Defines the line names and track sizing functions of the grid columns.
 */
gridTemplateColumns?: GridTemplateComponents, 
/**
 * Defines the line names and track sizing functions of the grid rows.
 */
gridTemplateRows?: GridTemplateComponents, 
/**
 * Defines named grid areas specified via `grid-template-areas`.
 */
gridTemplateAreas?: GridTemplateAreas, 
/**
 * How the width and height of an element are calculated.
 */
boxSizing?: BoxSizing, 
/**
 * How text should be overflowed.
 */
textOverflow?: TextOverflow, 
/**
 * Controls text case transformation when rendering.
 */
textTransform?: TextTransform, 
/**
 * Font slant style (normal, italic, oblique).
 */
textStyle?: TextStyle, 
/**
 * Color of the element's border.
 */
borderColor?: Color, 
/**
 * Text color for child text elements.
 */
color?: LinearGradientOrColor, 
/**
 * Font size for text rendering.
 */
fontSize?: LengthUnit, 
/**
 * Font family name for text rendering.
 */
fontFamily?: FontFamily, 
/**
 * Line height for text spacing, number is em.
 */
lineHeight?: LineHeight, 
/**
 * Font weight for text rendering.
 */
fontWeight?: FontWeight, 
/**
 * Maximum number of lines for text before truncation.
 */
lineClamp?: number, 
/**
 * Shorthand border radius (top, right, bottom, left).
 */
borderRadius?: Sides<LengthUnit>, 
/**
 * Longhand: top border radius. Overrides `border_radius` top value.
 */
borderRadiusTop?: LengthUnit, 
/**
 * Longhand: right border radius. Overrides `border_radius` right value.
 */
borderRadiusRight?: LengthUnit, 
/**
 * Longhand: bottom border radius. Overrides `border_radius` bottom value.
 */
borderRadiusBottom?: LengthUnit, 
/**
 * Longhand: left border radius. Overrides `border_radius` left value.
 */
borderRadiusLeft?: LengthUnit, 
/**
 * Text alignment within the element.
 */
textAlign?: TextAlign, 
/**
 * Additional spacing between characters in text.
 */
letterSpacing?: LengthUnit, 
/**
 * Controls how images are scaled when rendered.
 */
imageRendering?: ImageScalingAlgorithm, };
